{
  "articles": [
    {
      "path": "index.html",
      "title": "Introduction to R for the Statistical Programmer",
      "description": "A two hour workshop to get you started using R for all your clinical trial analyses\n",
      "author": [],
      "contents": "\n\n\nWhat You’ll Learn\nIn this workshop, statistical programmers will be introduced to the R\nprogramming language and the tidyverse, using familiar clinical\nexamples. Attendees will leave with a basic understanding of what R is,\nwhat the tidyverse is and why it’s important, and what the open-source\nlandscape has to offer us in the world of clinical statistical\nprogramming.\n All\nworkshop materials can be found here \nHands-on programming examples will be offered to give attendees some\nbasic knowledge of the tools available in R to support common clinical\nworkflows, such as SDTM, ADaM and clinical TFLs. If you’ve never worked\nin R before, but want to see how it can be used in your day-to-day\ntasks, come join us and see what this powerful open-source language has\nto offer!\nInstructors\n\n\nMike\nStackhouse  Cheif Innovation Officer\n\n\nJessica\nHiggins  Associate Director\n\n\n",
      "last_modified": "2022-05-19T16:07:36+00:00"
    },
    {
      "path": "resources.html",
      "title": "Resources",
      "author": [],
      "contents": "\nFunction References\nFunction\nPurpose\nDocs\nselect\nSelects variables in a data frame\n📄\nfilter\nSubsets a data frame, retaining all rows that satisfy your\nconditions\n📄\nrename\nChanges the names of individual variables\n📄\narrange\nOrders the rows of a data frame by the values of selected\ncolumns\n📄\nbind_rows\nBinds many data frames into one\n📄\n*_join\nJoins add columns from y to x, matching rows based on the keys\n📄\nmutate\nAdds new variables and preserves existing ones\n📄\nif_else\nReturns a value with the same shape as test which is filled with\nelements selected from either yes or no depending on whether the element\nof test is TRUE or FALSE\n📄\ncase_when\nAllows you to vectorise multiple if_else() statements\n📄\nrowwise\nAllows you to compute on a data frame a row-at-a-time\n📄\nsummarize\nCreates a new data frame. It will have one (or more) rows for each\ncombination of grouping variables; if there are no grouping variables,\nthe output will have a single row summarising all observations in the\ninput. It will contain one column for each grouping variable and one\ncolumn for each of the summary statistics that you have specified.\n📄\ngroup_by\nTakes an existing tbl and converts it into a grouped tbl where\noperations are performed “by group”\n📄\ncount\nLets you quickly count the unique values of one or more\nvariables\n📄\nWhere to Go From Here:\nWe mentioned a lot of amazing packages within the R ecosystem that we\nleverage every day. click on the package photo for more info and\ndocumentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "last_modified": "2022-05-19T16:07:36+00:00"
    },
    {
      "path": "schedule.html",
      "title": "Schedule",
      "description": "Workflow for today's workshop",
      "author": [],
      "contents": "\nToday’s Schedule\n🎬 Getting Started\n📓 R Basics\n📈 Working with Data Frames\n💻 Translating Keep, Drop, Where, & Rename\n⌨️ Breakout 1\n💻 Translating Set & Merge\n⌨️ Breakout 2\n💻 Mutate\n⌨️ Breakout 3\n💻 Translating PROC MEAN, PROC FREQ, PROC UNIVARIATE\n⌨️ Breakout 4\n🌐 Where to go from Here\n\n\n\n",
      "last_modified": "2022-05-19T16:07:37+00:00"
    },
    {
      "path": "setup.html",
      "title": "Setup Your Environment",
      "description": "We will spend most of our time in this workshop in RStudio Cloud. We recommend the Firefox or Chrome browsers and will use Firefox during the workshop.",
      "author": [],
      "contents": "\nThe Cloud\nDuring the workshop we will be using RStudio Cloud. The benefit of\nthis is we can all use R with the same configurations, rather than\nsetting up R on each operating system.\nYou can find the project associated with the workshop here: https://rstudio.cloud/project/2623930. Once logged in,\nyou should see the PharmaSUG_intro_to_R_2022 project:\n\nClicking on the project will open an RStudio Session. This is what we\nwill be using to program for the entirety of the course\n\n\n\n\n",
      "last_modified": "2022-05-19T16:07:38+00:00"
    },
    {
      "path": "slides.html",
      "title": "Slides",
      "author": [],
      "contents": "\n\nContents\nWorkshop Goals\nObject Types\nAssigning Variables\nTesting Equality\nArithmetic Operators\nA Couple More\nThe Pipe %>%\nOperator\nWhat are packages?\nWhat is the tidyverse?\nKeep:\nDrop\nSub-setting by rows\n(where)\nRename\nSorting data\nset AKA bind_rows\nmerge AKA *_join\nAdding/editing a\nvariable\nif_else logic\nrowwise vs column\noperators\nDescriptive Statistics\nGrouped Descriptive\nStatistics\nCounting\nOption 1\nOption 2\nGrouped Option 1\nOther Options\n\n\nWorkshop Goals\nThis workshop is not exhaustive but meant to be a first contact with\nthe R programming language. We hope you leave the workshop able to\nsay:\n\nR isn’t scary!\n\nWe also hope to show you you can use R to do things with data you’re\nalready familiar with, as well as clinical computations.\nObject Types\nData Frames\nin R are like Datasets in SAS®. Data frames are made up of columns\ncalled vectors – treated like Variables in SAS® More\ndata types exist, but we’ll focus on data frames\n\nBasic Variable Types\nNumeric\nCharacter\nBoolean\n\n\na\n      b\n      c\n    1\n      a\n      TRUE\n    2\n      b\n      TRUE\n    3\n      c\n      FALSE\n    \n\nAssigning Variables\n\nThese two methods yield the same results, but the\nconvention is to use <-. Learn more here\nTesting Equality\nOperator\nMeaning\nExample\n<-\nassign\nx <- y\n==\nequal to\nx == y\n!=\nnot equal to\nx != y\n<\nless than\nx < y\n<=\nless than or equal to\nx <= y\n>\ngreater than\nx > y\n>=\ngreater than or equal to\nx >= y\nArithmetic Operators\noperator\nMeaning\nExample\nResult\n+\naddition\n1 + 1 == 2\n2\n-\nsubtraction\n1 -1 == 0\n0\n/\ndivision\n6/3 == 2\n2\n*\nmultiplication\n2 * 3 == 6\n6\n^ or **\nexponentiation\n3 ** 2 or 3 ^ 2\n9\n%%\nmodulus\n6%%5\n1\n%%\ninteger division\n7 %% 2\n3\nA Couple More\nOperator\nMeaning\nExample\n&\nand\nx & y\n|\nor\nx | y\n!\nnot\n!x\n%in%\nin\nx %in% y\nThe Pipe %>% Operator\nThe pipe, %>%, is used to create a pipeline of\nfunctions and can be read as “and then”\n\nWhat are packages?\nPackagers are collections of functions and tools to expand the\ncapabilities of R. You can import a package with:\nlibrary(package_name)\nWhat is the tidyverse?\n\nThe tidyverse is an opinionated collection of R packages designed for\ndata science. All packages share an underlying design philosophy,\ngrammar, and data structures.\n\n\nInstall the complete tidyverse with:\ninstall.packages(\"tidyverse\")\n\nKeep:\nWe can keep only the columns a\nand b from the original\ndat:\n\na\n      b\n      c\n    X\n      5\n      15\n    X\n      10\n      20\n    Y\n      2\n      12\n    Y\n      7\n      17\n    \n\nWith the code:\n\n\ndat %>%\n  select(a,b)\n\n\n\n\na\n      b\n    X\n      5\n    X\n      10\n    Y\n      2\n    Y\n      7\n    \n\nDrop\nWe can drop column c, choosing\neverything but column c:\n\na\n      b\n      c\n    X\n      5\n      15\n    X\n      10\n      20\n    Y\n      2\n      12\n    Y\n      7\n      17\n    \n\nBy using the code:\n\n\ndat %>%\n  select(-c)\n\n\n\n\na\n      b\n    X\n      5\n    X\n      10\n    Y\n      2\n    Y\n      7\n    \n\nSub-setting by rows\n(where)\nWe can subset dat where f\n>= 5\n\na\n      b\n      c\n    X\n      5\n      15\n    X\n      10\n      20\n    Y\n      2\n      12\n    Y\n      7\n      17\n    \n\nUsing the following code:\n\n\ndat %>%\n  filter(b>=5)\n\n\n\n\na\n      b\n    X\n      5\n    X\n      10\n    Y\n      7\n    \n\nRename\nWe can use R’s rename function to rename columns\na and b to groups and\nvalues. Given this starting data frame:\n\na\n      b\n      c\n    X\n      5\n      15\n    X\n      10\n      20\n    Y\n      2\n      12\n    Y\n      7\n      17\n    \n\nWe can use the code:\n\n\ndat %>%\n  rename(\n    groups = a,\n    values = b\n  )\n\n\n\n\ngroups\n      values\n      c\n    X\n      5\n      15\n    X\n      10\n      20\n    Y\n      2\n      12\n    Y\n      7\n      17\n    \n\nSorting data\nCompared to SAS®, you don’t have to sort a lot of the time!\nWhen do I sort? - Presentation - Order dependent operations\n(i.e. baseline flag) - Don’t need it for grouping\nFor instance, if we want to sort our data frame by column b:\n\na\n      b\n      c\n    X\n      5\n      15\n    X\n      10\n      20\n    Y\n      2\n      12\n    Y\n      7\n      17\n    \n\nWe can use the arrange function on column\nb\n\n\ndat %>%\n  arrange(b)\n\n\n\n\na\n      b\n      c\n    Y\n      2\n      12\n    X\n      5\n      15\n    Y\n      7\n      17\n    X\n      10\n      20\n    \n\nset AKA bind_rows\n\nmerge AKA *_join\n\nAdding/editing a variable\nWe can use the mutate function to create new columns\nusing the data from existing columns. For instance we can create a new\ncolumn c by adding 10 to column b. We can also\nuse the mutate function to or modify existing columns in\nplace. For example, rather than create a new column, we can overwrite\ncolumn a adding - before and after each\nentry.\nOriginal Data\n\na\n      b\n    X\n      5\n    X\n      10\n    Y\n      2\n    Y\n      7\n    \n\nUsing the following code:\n\n\ndat %>%\n  mutate(\n    c = b + 10,\n    a = paste0(\"-\", a, \"-\")\n)\n\n\n\n\na\n      b\n      c\n    -X-\n      5\n      15\n    -X-\n      10\n      20\n    -Y-\n      2\n      12\n    -Y-\n      7\n      17\n    \n\nif_else logic\nWe can use if_else within a mutate to create new columns\nbased on another column. For instance, we can create a categorical\ncolumn of High and Low values based on column\nb:\n\na\n      b\n    X\n      5\n    X\n      10\n    Y\n      2\n    Y\n      7\n    \n\nWe can use this code:\n\n\ndat %>%\n  mutate(\n    level = if_else(b > 5,\n                    \"High\",\n                    \"Low\")\n    )\n\n\n\n\na\n      b\n      level\n    X\n      5\n      Low\n    X\n      10\n      High\n    Y\n      2\n      Low\n    Y\n      7\n      High\n    \n\nBut what if we want another, Medium category for values\ngreater than 3 but less than 7?\n\na\n      b\n    X\n      5\n    X\n      10\n    Y\n      2\n    Y\n      7\n    \n\nIf we were to use an if_else statement that would\nrequire nesting\n\n\ndat %>%\n  mutate(\n    level = if_else(b < 3, \"Low\",\n                    if_else(b < 8, \"Mid\",  \"High\"))\n    )\n\n\n\nBut this is really hard to read! Lucky for us we can use the\ncase_when function.\nThe structure of case_when can be read as:\nLeft side of ~ True/False or something that\nevaluates to True/False\nRight side of ~ Value to return\n\n\ndat %>%\n  mutate(\n    level = case_when(\n      b < 3 ~ \"Low\",\n      b < 8 ~ \"Mid\",\n      TRUE ~ \"High\"\n    )\n  )\n\n\n\n\na\n      b\n      level\n    X\n      5\n      Medium\n    X\n      10\n      High\n    Y\n      2\n      Low\n    Y\n      7\n      Medium\n    \n\nrowwise vs column operators\n\n\n\n\ndat %>%\n  mutate(\n    c = mean(c(a,b))\n  )\n#\n\n\n\n\na\n      b\n      c\n    5\n      5\n      6.375\n    16\n      10\n      6.375\n    3\n      2\n      6.375\n    3\n      7\n      6.375\n    \n\n\n\n\n\ndat %>%\n  rowwise() %>%\n  mutate(\n    c = mean(c(a,b))\n  )\n\n\n\n\na\n      b\n      c\n    5\n      5\n      5.0\n    16\n      10\n      13.0\n    3\n      2\n      2.5\n    3\n      7\n      5.0\n    \n\n\n\nDescriptive Statistics\n\na\n      b\n    X\n      5\n    X\n      10\n    Y\n      2\n    Y\n      7\n    \n\n\n\ndat %>%\n  summarize(\n    mean = mean(b),\n    sd = sd(b),\n    min = min(b),\n    max = max(b)\n  )\n\n\n\n\nmean\n      sd\n      min\n      max\n    6\n      3.36\n      2\n      10\n    \n\nGrouped Descriptive\nStatistics\n\na\n      b\n    X\n      5\n    X\n      10\n    Y\n      2\n    Y\n      7\n    \n\n\n\ndat %>%\n  group_by(a) %>%\n  summarize(\n    mean = mean(b),\n    sd = sd(b),\n    min = min(b),\n    max = max(b)\n  )\n\n\n\n\na\n      mean\n      sd\n      min\n      max\n    X\n      7.5\n      3.53\n      5\n      10\n    Y\n      4.5\n      3.53\n      2\n      7\n    \n\nCounting\nOption 1\n\na\n      b\n    X\n      dog\n    X\n      cat\n    X\n      rabbit\n    Y\n      rabbit\n    Y\n      rabbit\n    \n\n\n\ndat %>% \n  group_by(b) %>% \n  summarize( \n    n = n() \n  )\n\n\n\n\na\n      b\n    1\n      dog\n    1\n      cat\n    3\n      rabbit\n    \n\nOption 2\n\na\n      b\n    X\n      dog\n    X\n      cat\n    X\n      rabbit\n    Y\n      rabbit\n    Y\n      rabbit\n    \n\n\n\ndat %>% \n  count(b)\n\n\n\n\na\n      b\n    1\n      dog\n    1\n      cat\n    3\n      rabbit\n    \n\nGrouped Option 1\n\na\n      b\n    X\n      dog\n    X\n      cat\n    X\n      rabbit\n    Y\n      rabbit\n    Y\n      rabbit\n    \n\n\n\ndat %>% \n  group_by(a, b) %>% \n  summarize( \n    n = n() \n  )\n\n\n\n\na\n      b\n    1\n      dog\n    1\n      cat\n    3\n      rabbit\n    \n\nOther Options\nIn the course we also showcase 2 other ways to achieve the same goal.\nThe first is using group_by and count\n\n\ndat %>%\n  group_by(a) %>% \n  count(b)\n\n\n\nor with even shorter code, calling count on both columns\nwe’d like to group by:\n\n\ndat %>%\n  count(a, b)\n\n\n\n\n\n\n",
      "last_modified": "2022-05-19T16:08:02+00:00"
    }
  ],
  "collections": []
}
